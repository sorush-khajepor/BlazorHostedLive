@typeparam TItem

<style>
    .dropdown {
        position: relative;
        display: inline-block;
        background-color: white;
        border: 1px solid lightgray;
        min-width: 170px;
        min-height: 30px;
    }

    .dropdown:hover {
        border: 1px solid darkgray;
    }


    .dropdown-content {
        position: absolute;
        background-color: #f9f9f9;
        border-radius: 5px;
        top: 32px;
        min-width: 100%;
        max-width: 100%;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        z-index: 1;
        overflow-y:scroll;
    }

    .selected-item {
        position: absolute;
        pointer-events: none;
        overflow: hidden;
        text-overflow: ellipsis;
        padding-left: 2px;
        padding-top: 2px;
        min-width: 100%;
        max-width:100%;
        min-height:100%;
        max-height:100%;
        z-index: 4;
    }

    .input {
        position: absolute;
        outline: none;
        border: none;
        padding-left: 2px;
        z-index: 1;
        min-width: 100%;
        max-width: 100%;
        min-height: 100%;
        max-height: 100%;
    }

    .item {
        margin:0px;
        padding-left:5px;
        border-top: 1px solid lightgray;
       
    }

        .item:focus {
            background-color: lightgreen
        }

        .item:hover {
            background-color: lightgray
        }
</style>

<div class="dropdown" style="@dropDownStyle">

    <input type="text"
           class="input"
           @bind-value="@InputText"
           @bind-value:event="oninput"
           @onkeypress='(_ => {   })'
           @onfocusin='(_ => { FilteredItems = Items;  showDropDown = true; selectedItemOpacity = "0.5"; dropDownStyle = "border: 1px solid blue;"; })'
           @onfocusout='(_ => { showDropDown = false; selectedItemOpacity = "1"; inputText = "";dropDownStyle = ""; })' />

    @if (showSelectedItem && isSelected)
    {
        <span tabindex="-1"
              class="selected-item"
              style="opacity:@selectedItemOpacity">
            @ItemTemplate(selectedItem)
        </span>
    }
    else if(showPlaceHolder)
    {
        <span tabindex="-1"
              class="selected-item"
              style="opacity:0.5">
            @PlaceHolder
        </span>
    }
    
    <div class="dropdown-content" style="display:@(showDropDown ? " block" : "none" )">
        @foreach (var item in FilteredItems)
        {
            <p class="item"
               style='@(ReferenceEquals(item,selectedItem)?"background-color:cornflowerblue;":"")'
               tabindex="0"
               @onmousedown='(_ => { selectedItem = item; showDropDown = false; inputText=""; OnSelected.InvokeAsync(selectedItem); })'>
                @ItemTemplate(item)
            </p>
        }


    </div>
</div>

@code {

    private bool showDropDown = false;
    private bool isSelected { get => selectedItem != null; }
    private bool showSelectedItem { get => string.IsNullOrEmpty(inputText); }
    private string itemClass;
    private string selectedItemOpacity="1";
    private bool showPlaceHolder { get => string.IsNullOrEmpty(inputText); }
    [Parameter]
    public string PlaceHolder { get; set; } = "Search ...";
    private string inputText="";
    private string dropDownStyle = "";

    TItem selectedItem;
    [Parameter]
    public EventCallback<TItem> OnSelected { get; set; }

    public string InputText
    {
        get
        {
            return inputText;
        }
        set
        {
            inputText = value;
            FilteredItems=Items.Where(p=>GetItemJson(p).ToLower().Contains(inputText.ToLower())).ToList();

        }
    }

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; }

    [Parameter]
    public RenderFragment<string> SearchedText { get; set; }

    [Parameter]
    public IList<TItem>  Items {get; set;}

    IList<TItem>  FilteredItems;
    protected override async Task OnInitializedAsync()
    {
        FilteredItems = Items;

        /*
        Type t = Items.GetType();

        var prop = t.GetProperty("Items");

        object list = prop.GetValue(Items);
        */

    }

    string GetItemJson(TItem item)
    {
        return System.Text.Json.JsonSerializer.Serialize<TItem>(item);
    }
}
